import User from "../models/user.model.js";
import Member from "../models/member.model.js";
import Trainer from "../models/trainer.model.js";
import { generateTokenAndSetCookie } from "../utils/generateToken.setCookie.js";
import nodemailer from "nodemailer";
import multer from "multer";
import bcryptjs from "bcryptjs";
import crypto from "crypto";
import jwt from "jsonwebtoken";

const upload = multer({ dest: "uploads/" });

export const register = async (req, res) => {
  const { surname, username, email, password, role, gender } = req.body;
  try {
    if (!surname || !username || !email || !password || !role) {
      return res.status(400).json({ message: "–¢–∞–ª–±–∞—Ä –¥—É—Ç—É—É –±–∞–π–Ω–∞" });
    }
    const alreadyExists = await User.findOne({ email });
    if (alreadyExists) {
      return res.status(400).json({ message: "–ë“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á" });
    }
    if (password.length < 6) {
      return res
        .status(400)
        .json({ message: "–ù—É—É—Ü “Ø–≥ –±–∞–≥–∞–¥–∞–∞ 6 –æ—Ä–æ–Ω—Ç–æ–π –±–∞–π–Ω–∞" });
    }

    const hashedPassword = await bcryptjs.hash(password, 10);
    const user = new User({
      surname,
      username,
      email,
      password: hashedPassword,
      role,
      gender,
    });
    await user.save();

    if (role === "user") {
      const newMember = new Member({
        userId: user._id,
        membership: { isActive: false },
      });
      await newMember.save();
    } else if (role === "trainer") {
      const newTrainer = new Trainer({ userId: user._id });
      await newTrainer.save();
    }

    res.status(201).json({ message: "–•—ç—Ä—ç–≥–ª—ç–≥—á –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–ª—ç—ç" });
  } catch (error) {
    console.error("–∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", error);
  }
};

export const login = async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π" });
    }

    const isValidPassword = await bcryptjs.compare(password, user.password);
    if (!isValidPassword) {
      return res.status(400).json({ message: "–ë—É—Ä—É—É –Ω—É—É—Ü “Ø–≥" });
    }

    // JWT cookie “Ø“Ø—Å–≥—ç—Ö
    generateTokenAndSetCookie(res, user._id);

    let profileImage = null;

    // Role —à–∞–ª–≥–∞—Ö –±–∞ profileImage –∞–≤–∞—Ö
    if (user.role === "trainer") {
      const trainer = await Trainer.findOne({ user: user._id });
      profileImage = trainer?.profileImage || null;
    }

    if (user.role === "user") {
      const member = await Member.findOne({ user: user._id });
      profileImage = member?.profileImage || null;
    }

    // Response –±—É—Ü–∞–∞—Ö
    return res.status(200).json({
      message: user.profileCompleted ? user.role : "—à–∏–Ω—ç " + user.role,
      user: {
        id: user._id,
        role: user.role,
        profileComplete: user.profileCompleted,
      },
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Internal server error" });
  }
};

export const logout = async (req, res) => {
  res.clearCookie("token");
  try {
    res.status(200).json({ success: true, message: "–ê–º–∂–∏–ª—Ç—Ç–∞–π –≥–∞—Ä–ª–∞–∞" });
  } catch (error) {
    console.error("Error in logout controller:", error.message);
    res.status(500).json({ message: "Internal Server Error" });
  }
};

export const forgotPassword = async (req, res) => {
  const { email } = req.body;

  try {
    const user = await User.findOne({ email });

    if (!user) return res.status(404).json({ message: "Email –æ–ª–¥—Å–æ–Ω–≥“Ø–π" });

    const token = crypto.randomBytes(32).toString("hex");
    user.resetToken = token;
    user.resetTokenExpiry = Date.now() + 3600000; // 1 hour
    await user.save();

    const resetLink = `http://localhost:5173/reset-password/${user._id}/${token}`;

    var transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.Node_mailer_user, // your email
        pass: process.env.Node_mailer_pass, // your email password
      },
    });

    var mailOptions = {
      from: "Smart Gym ",
      to: user.email,
      subject: "üîê –ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö –ª–∏–Ω–∫",
      html: `
    <div style="font-family: Arial, sans-serif; padding: 20px; background-color: #f9f9f9; color: #333;">
      <div style="max-width: 600px; margin: auto; background-color: #ffffff; padding: 30px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
        <h2 style="color: #4CAF50;">–ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö —Ö“Ø—Å—ç–ª—Ç</h2>
        <p>–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É?</p>
        <p>–¢–∞ –Ω—É—É—Ü “Ø–≥—ç—ç –º–∞—Ä—Ç—Å–∞–Ω —Ç—É–ª –¥–æ–æ—Ä—Ö —Ç–æ–≤—á–ª—É—É—Ä –¥—ç—ç—Ä –¥–∞—Ä–∂ –¥–∞—Ö–∏–Ω —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π.</p>
        <a href="${resetLink}" 
           style="display: inline-block; background-color: #4CAF50; color: white; padding: 12px 20px; text-decoration: none; border-radius: 5px; margin-top: 20px;">
          –ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö
        </a>
        <p style="margin-top: 30px; font-size: 12px; color: #888;">
          –•—ç—Ä–≤—ç—ç —Ç–∞ –∏–π–º —Ö“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç–∂ –±–∞–π–≥–∞–∞–≥“Ø–π –±–æ–ª —ç–Ω—ç—Ö“Ø“Ø –∏–º—ç–π–ª–∏–π–≥ “Ø–ª —Ç–æ–æ–≥–æ–æ—Ä–æ–π.
        </p>
      </div>
    </div>
  `,
    };

    transporter.sendMail(mailOptions, function (error, info) {
      if (error) {
        console.log(error);
      } else {
        return res.send({ Status: "–ê–º–∂–∏–ª—Ç—Ç–∞–π" });
      }
    });

    res.json({ message: "Reset link –∏–π–≥ Email —Ä—É—É —è–≤—É—É–ª—Å–∞–Ω" });
  } catch (error) {
    console.error("Error in forgotPassword controller:", error.message);
    return res.status(500).json({ message: "Internal Server Error" });
  }
};

export const resetPassword = async (req, res) => {
  const { token } = req.params;
  const { password } = req.body;

  try {
    const user = await User.findOne({
      resetToken: token,
      resetTokenExpiry: { $gt: Date.now() },
    });

    if (!user)
      return res.status(400).json({ message: "Invalid or expired token" });
    const hashedPassword = await bcryptjs.hash(password, 10);
    user.password = hashedPassword;
    user.resetToken = undefined;
    user.resetTokenExpiry = undefined;
    await user.save();

    res.json({ message: "–ù—É—É—Ü “Ø–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç" });
  } catch (error) {
    console.error("Error in resetPassword controller:", error.message);
    return res.status(500).json({ message: "Internal Server Error" });
  }
};

export const completeProfile = async (req, res) => {
  try {
    const user = req.user;
    const userId = user._id;

    const {
      age,
      address,
      phone,
      height,
      weight,
      goal,
      experience,
      specialization,
      certifications,
    } = req.body;

    let profileImage = null;
    if (req.file) profileImage = `${req.file.filename}`;

    let profileRecord = null;

    if (user.role === "user") {
      profileRecord = await Member.findOneAndUpdate(
        { userId }, // schema-–¥ —Ç–∞–∞—Ä—Å–∞–Ω —Ç–∞–ª–±–∞—Ä
        {
          userId,
          age: Number(age),
          address,
          phone,
          height: Number(height),
          weight: Number(weight),
          goal,
          ...(profileImage && { profileImage }),
        },
        { new: true, upsert: true }
      );
    } else if (user.role === "trainer") {
      profileRecord = await Trainer.findOneAndUpdate(
        { userId },
        {
          userId,
          age: Number(age),
          address,
          phone,
          height: Number(height),
          weight: Number(weight),
          experience,
          specialization,
          certifications: certifications ? certifications.split(",") : [],
          ...(profileImage && { profileImage }),
        },
        { new: true, upsert: true }
      );
    }

    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { profileCompleted: true },
      { new: true }
    ).select("-password");

    res.json({
      message: "–ü—Ä–æ—Ñ–∞–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞",
      user: updatedUser,
      profile: profileRecord,
    });
  } catch (error) {
    console.error("completeProfile –∞–ª–¥–∞–∞:", error);
    res.status(500).json({
      message: "Profile completion failed",
      error: error.message,
    });
  }
};

export const checkAuth = (req, res) => {
  try {
    res.status(200).json(req.user);
  } catch (error) {
    console.log("Error in checkAuth controller", error.message);
    res.status(500).json({ message: "Internal Server Error" });
  }
};
